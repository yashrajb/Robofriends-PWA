{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","container/App.js","actions.js","index.js"],"names":["initialState","searchfield","requestState","error","robots","pending","Boolean","window","location","hostname","match","Card","props","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","map","user","index","components_Card","Object","assign","key","Searchbox","type","placeholder","onInput","onTextChange","Scroll","style","overflow","height","border","children","App","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onRequest","_this","filteredRobots","filter","toLowerCase","includes","searchField","components_Searchbox","components_Scroll","components_CardList","React","Component","connect","state","search","request","dispatch","event","payload","target","value","isPending","fetch","then","response","json","catch","err","rootReducers","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0e22eb0.chunk.js","sourcesContent":["const initialState = {\r\n   searchfield:''\r\n}\r\n\r\nexport const search = (state=initialState,action={}) => {\r\n     switch(action.type){\r\n         case \"CHANGE_SEARCH_FIELD\":\r\n            return {...state,searchfield:action.payload}\r\n         default:\r\n           return state;\r\n     }\r\n}\r\n\r\nconst requestState = {\r\n   error:'',\r\n   robots:[],\r\n   pending:false\r\n}\r\n\r\nexport const request = (state=requestState,action={}) => {\r\n     switch(action.type){\r\n        case \"REQUEST_PENDING\":\r\n          return {\r\n             ...state,\r\n             pending:action.isPending\r\n          }\r\n         case \"REQUEST_SUCCESS\":\r\n         return {\r\n            ...state,\r\n            robots:action.robots,\r\n            pending:action.isPending\r\n         }\r\n         case \"REQUEST_FAILED\":\r\n         return {\r\n            ...state,\r\n            error:action.error,\r\n            pending:action.isPending\r\n         }\r\n          default:\r\n            return state\r\n     }\r\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n          <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n              <img src={`https://robohash.org/${props.id}?200x200`} alt=\"\"/>\r\n              <div>\r\n                  <h2>{props.name}</h2>\r\n                  <p>{props.email}</p>\r\n              </div>\r\n          </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n         <div>\r\n            {props.robots.map((user,index) => {\r\n              return <Card key={index} {...props.robots[index]} />\r\n            })}\r\n         </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst Searchbox = (props) => {\r\nreturn (\r\n    <div>\r\n      <input type=\"text\" className=\"pa2 ma3\" placeholder=\"Search...\" onInput={props.onTextChange}/>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Searchbox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => { \r\n      return (\r\n          <div style={{overflow:\"scroll\",height:\"600px\",border:\"1px solid black\"}}>\r\n             {props.children}\r\n          </div>\r\n      )\r\n   }\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Searchbox from \"../components/Searchbox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeSearchField,requestRobots} from \"../actions\";\r\n\r\nclass App extends React.Component {\r\n\r\n constructor(props){\r\n   super();\r\n }\r\n\r\n componentWillMount(){\r\n   this.props.onRequest();\r\n }\r\n\r\nrender(){\r\nconst filteredRobots = this.props.robots.filter((user) => {\r\nreturn user.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n})\r\nreturn (\r\n<div className=\"tc\">\r\n<h1>Robofriends</h1>\r\n<Searchbox onTextChange={this.props.onTextChange}/>\r\n<Scroll>\r\n   <CardList robots={filteredRobots}/>\r\n</Scroll>\r\n\r\n</div>\r\n)\r\n                                                \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n   searchField:state.search.searchfield,\r\n   error:state.request.error,\r\n   robots:state.request.robots,\r\n   pending:state.request.pending\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onTextChange:(event) => dispatch(changeSearchField(event.target.value)),\r\n    onRequest:(event) => dispatch(requestRobots(dispatch))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","export const changeSearchField = (text) => ({\r\n    type:\"CHANGE_SEARCH_FIELD\",\r\n    payload:text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type:'REQUEST_PENDING',isPending:true})\r\n    fetch('https://jsonplaceholder.typicode.com/users').then((response) => response.json())\r\n       .then((robots) => dispatch({type:'REQUEST_SUCCESS',robots:robots,isPending:false}))\r\n       .catch((err) => dispatch({type:'REQUEST_FAILED',error:err,isPending:false}))\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport {search,request} from \"./reducers\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./container/App\";\nimport 'tachyons';\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nif (process.env.NODE_ENV !== 'production') {\nconst {whyDidYouUpdate} = require('why-did-you-update');\nwhyDidYouUpdate(React);\n}\n\nconst rootReducers = combineReducers({search,request});\nconst store = createStore(rootReducers,\n +window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\napplyMiddleware(thunkMiddleware,logger)\n);\n\nReactDOM.render(<Provider store={store}>\n<App/>\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}